#!/usr/bin/env python3
"""
Verificaci√≥n del estado actual antes de la migraci√≥n
"""

import requests
from datetime import datetime

def check_system_status():
    """Verificar estado actual del sistema"""
    print("üîç VERIFICANDO ESTADO ACTUAL DEL SISTEMA")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    base_url = "http://localhost:8000"
    
    try:
        # Verificar endpoint b√°sico de materiales
        print("\n1Ô∏è‚É£ Verificando endpoint b√°sico /api/materials...")
        response = requests.get(f"{base_url}/api/materials", timeout=10)
        
        if response.status_code == 200:
            materials = response.json()
            print(f"   ‚úÖ Endpoint funcionando")
            print(f"   üìä Materiales encontrados: {len(materials)}")
            
            # Verificar si ya tienen campo category
            if materials and isinstance(materials[0], dict):
                first_material = materials[0]
                has_category = 'category' in first_material
                print(f"   üè∑Ô∏è  Campo 'category' existe: {has_category}")
                
                if has_category:
                    print("   ‚ö†Ô∏è  ATENCI√ìN: El campo 'category' ya existe")
                    print("   üí° La migraci√≥n de categorizaci√≥n puede ya estar aplicada")
                else:
                    print("   ‚úÖ Campo 'category' no existe - migraci√≥n necesaria")
                    
                # Mostrar algunos materiales de ejemplo
                print("\n   üìã Primeros 5 materiales:")
                for i, material in enumerate(materials[:5]):
                    name = material.get('name', 'N/A')
                    price = material.get('cost_per_unit', 0)
                    unit = material.get('unit', 'N/A')
                    category = material.get('category', 'NO CATEGORY')
                    print(f"      {i+1}. {name} - ${price}/{unit} [{category}]")
                    
        else:
            print(f"   ‚ùå Error: Status {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("   ‚ùå Error: No se puede conectar al servidor")
        print("   üí° Aseg√∫rate de que el servidor est√© corriendo en http://localhost:8000")
        return False
    except Exception as e:
        print(f"   ‚ùå Error inesperado: {e}")
        return False
    
    try:
        # Verificar endpoint de categor√≠as
        print("\n2Ô∏è‚É£ Verificando endpoint /api/materials/by-category...")
        response = requests.get(f"{base_url}/api/materials/by-category", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Endpoint funcionando")
            
            if 'categories' in data:
                categories = data['categories']
                print(f"   üìä Categor√≠as encontradas: {len(categories)}")
                for cat_name, materials in categories.items():
                    print(f"      üìÅ {cat_name}: {len(materials)} materiales")
            else:
                print("   ‚ö†Ô∏è  Estructura de respuesta inesperada")
                
        elif response.status_code == 405:
            print("   ‚ö†Ô∏è  Error 405 - Usar fallback autom√°tico")
        elif response.status_code == 500:
            print("   ‚ö†Ô∏è  Error 500 - Campo category probablemente no existe")
        else:
            print(f"   ‚ùå Error: Status {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error con endpoint categor√≠as: {e}")
    
    try:
        # Verificar colores
        print("\n3Ô∏è‚É£ Verificando colores existentes...")
        response = requests.get(f"{base_url}/api/colors", timeout=10)
        
        if response.status_code == 200:
            colors = response.json()
            print(f"   ‚úÖ Endpoint de colores funcionando")
            print(f"   üé® Colores encontrados: {len(colors)}")
            
            if colors:
                print("   üé® Colores existentes:")
                for color in colors:
                    name = color.get('name', 'N/A')
                    code = color.get('code', 'N/A')
                    print(f"      ‚Ä¢ {name} ({code})")
            else:
                print("   üìù No hay colores configurados - migraci√≥n necesaria")
                
        else:
            print(f"   ‚ùå Error en colores: Status {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error con endpoint colores: {e}")
    
    # Verificar UI
    try:
        print("\n4Ô∏è‚É£ Verificando acceso a UI...")
        response = requests.get(f"{base_url}/materials_catalog", timeout=10)
        
        if response.status_code == 200:
            print("   ‚úÖ UI del cat√°logo accesible")
        else:
            print(f"   ‚ö†Ô∏è  UI status: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error accediendo UI: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ VERIFICACI√ìN PRE-MIGRACI√ìN COMPLETADA")
    print("\nüí° RECOMENDACI√ìN:")
    print("   Si todo se ve bien, podemos proceder con la migraci√≥n")
    print("   Los errores 405/500 en categor√≠as son normales antes de migrar")
    
    return True

if __name__ == "__main__":
    check_system_status()