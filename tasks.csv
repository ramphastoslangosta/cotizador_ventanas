task_id,title,description,priority,status,phase,estimated_effort,dependencies,branch_name,pr_template,test_file,notes
TASK-20250929-001,"Decompose main.py monolith - Extract authentication routes","Extract authentication-related routes from main.py (2,273 lines) to app/routes/auth.py. Move login, register, logout routes while maintaining existing API contracts. Create app/routes/__init__.py and app/dependencies/auth.py structure. Ensure all existing tests pass without modification. Target: Reduce main.py by ~300 lines. Acceptance Criteria: 1) All auth routes moved to auth.py 2) No API contract changes 3) All tests pass 4) Authentication flow unchanged.",critical,completed,1,2,none,refactor/auth-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,"✅ DEPLOYED TO PRODUCTION (Sept 30, 2025 23:40 UTC). Auth routes extracted (275 lines auth.py, 102 lines auth dependencies). 8 auth routes registered (/login, /register, /web/login, /web/register, /web/logout, /auth/login, /auth/register, /auth/me). Rebased on TASK-003 for all fixes (bcrypt 4.1.3, Docker, templates config). Tested in test env (port 8001), deployed to production http://159.65.174.94:8000. 95 total routes. Zero downtime. Authentication fully functional."
TASK-20250929-002,"Decompose main.py monolith - Extract quote routes","Extract quote-related routes from main.py to app/routes/quotes.py. Move quote CRUD operations, calculate endpoint, and quote list page. Preserve quote calculation engine functionality. Target: Reduce main.py by ~500 lines. Acceptance Criteria: 1) All quote routes moved to quotes.py 2) Quote calculations work identically 3) CSV export/import preserved 4) Quote editing (QE-001) functional.",critical,completed,1,2,TASK-20250929-001,refactor/quote-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,"Router created (659 lines with 10 routes + 2 calc functions). Registered in main.py. Rebased with main (includes TASK-001 and TASK-003). Ready for deployment."
TASK-20250929-003,"Decompose main.py monolith - Extract work order and material routes","Extract work order routes (QTO-001 system) to app/routes/work_orders.py and material management routes to app/routes/materials.py. Move WorkOrder CRUD operations, materials catalog, and CSV upload endpoints. Target: Reduce main.py to <500 lines. Acceptance Criteria: 1) Work order routes in work_orders.py 2) Material routes in materials.py 3) QTO-001 functionality preserved 4) Material CSV upload working 5) main.py contains only app initialization.",critical,completed,1,2,TASK-20250929-002,refactor/workorder-material-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,"✅ DEPLOYED TO PRODUCTION (Sept 30, 2025 22:15 UTC). Routers created (335+517 lines), tested in test env, all issues fixed, deployed to http://159.65.174.94:8000. 95 routes registered (25 materials, 15 work orders). Zero downtime deployment. Duplicates remain in main.py for TASK-012 cleanup."
TASK-20250929-004,"Fix CSV test script extreme complexity","Refactor run_csv_tests.py to reduce cyclomatic complexity from E rating (31) to <10. Extract test case generators to separate functions. Implement test builder pattern for CSV test scenarios. Break down monolithic test function into focused unit tests. Acceptance Criteria: 1) Cyclomatic complexity <10 2) Test coverage maintained 3) All CSV tests pass 4) Code follows pytest best practices 5) Test execution time unchanged or improved.",high,pending,1,1,none,refactor/csv-tests-complexity-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,
TASK-20250929-005,"Implement service interfaces for dependency inversion","Create abstract base classes for database services to implement Dependency Inversion Principle. Add IUserService, IQuoteService, IWorkOrderService, IMaterialService interfaces in app/interfaces/. Update existing service classes to implement interfaces. Enable better testing with mock implementations. Acceptance Criteria: 1) Abstract base classes created 2) All services implement interfaces 3) Services depend on abstractions not concretions 4) Mock service implementations for testing 5) No functionality changes.",high,pending,1,2,TASK-20250929-003,refactor/service-interfaces-20250929,critical-refactoring.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-006,"Optimize database queries in BOM calculations","Fix N+1 query problem in calculate_window_item_from_bom function (main.py:533-650). Implement eager loading for BOM relationships using SQLAlchemy joinedload(). Add query batching for material lookups. Target: Reduce database queries by 80%, improve quote calculation from 200ms to 50ms. Acceptance Criteria: 1) N+1 queries eliminated 2) Performance improvement measured with pytest-benchmark 3) Quote calculation <100ms for typical BOM 4) Database query count reduced by 80% 5) No functionality changes.",high,pending,2,2,TASK-20250929-003,perf/bom-query-optimization-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-007,"Implement formula evaluation caching","Add LRU cache for SafeFormulaEvaluator parsed expressions. Cache simpleeval expression parsing to avoid repeated parsing overhead. Implement functools.lru_cache with maxsize=128 for frequently used formulas. Target: Reduce formula evaluation overhead by 60%. Acceptance Criteria: 1) LRU cache implemented for expression parsing 2) Cache hit rate >70% for typical usage 3) Performance improvement measured 4) Memory usage acceptable (<50MB cache) 5) Cache invalidation on formula changes.",medium,pending,2,1,TASK-20250929-006,perf/formula-caching-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-008,"Implement streaming CSV processing","Replace memory-intensive CSV loading in MaterialCSVService with streaming approach. Implement chunked processing for large CSV files using pandas chunksize parameter or csv.reader iteration. Support CSV files up to 100MB (currently limited to ~10MB). Reduce memory usage for CSV operations. Acceptance Criteria: 1) Streaming CSV reader implemented 2) Support files up to 100MB 3) Memory usage <200MB for 100MB file 4) Processing time linear with file size 5) All CSV import/export tests pass.",medium,pending,2,2,TASK-20250929-004,perf/csv-streaming-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-009,"Implement command pattern for quote calculations","Create CalculateQuoteCommand class implementing command pattern for quote calculation operations. Enable undo/redo functionality for quote modifications. Improve testability by encapsulating calculation logic. Add QuoteCommandInvoker for command execution. Acceptance Criteria: 1) CalculateQuoteCommand class created 2) Command pattern properly implemented 3) Undo capability added 4) Calculation logic encapsulated 5) Unit tests for command execution.",medium,pending,3,2,TASK-20250929-006,arch/quote-command-pattern-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-010,"Extract business logic from Jinja2 templates","Move calculation logic from HTML templates to service layer. Create template helper functions in services/template_helpers.py. Extract data processing from templates/quotes_list.html, templates/view_quote.html, templates/work_order_detail.html. Improve separation of concerns following Single Responsibility Principle. Acceptance Criteria: 1) No calculations in templates 2) Template helpers created 3) Templates use pre-processed data only 4) All pages render correctly 5) No visual changes to UI.",low,pending,3,1,TASK-20250929-009,arch/template-logic-extraction-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-011,"Implement factory pattern for model creation","Create MaterialFactory and ProductFactory classes for model instantiation. Simplify object creation with validation and default values. Add factories in app/factories/ directory. Enable consistent object creation across application. Acceptance Criteria: 1) MaterialFactory class created 2) ProductFactory class created 3) Factories handle validation 4) Default values properly set 5) Existing code migrated to use factories.",low,pending,3,1,TASK-20250929-010,arch/model-factories-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-012,"Remove duplicate auth and quote routes from main.py","Clean up main.py by removing duplicate auth routes (lines 724-901) and quote routes (lines 903-1400) now that routers are registered and working. Verify no functionality breaks. Target: Reduce main.py by ~670 lines. Acceptance Criteria: 1) All duplicate auth routes removed 2) All duplicate quote routes removed 3) All tests still pass 4) Application starts successfully 5) No broken imports or references.",medium,completed,1,0.5,TASK-20250929-002,refactor/cleanup-duplicate-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,"✅ COMPLETED (Oct 2, 2025) - Removed 9 duplicate quote routes from main.py (418 lines). Auth routes already clean. Reduced main.py from 1,979 to 1,561 lines (-21%). Route count: 104 → 95. All tests passing. Branch: refactor/cleanup-duplicate-routes-20250929. Commits: 008f617 (code), 1189df4 (tests)."
HOTFIX-20251001-001,"Fix Router Data Processing (QuoteListPresenter)","Extract 85-line data processing logic from main.py to QuoteListPresenter class in app/presenters/. Router was returning raw Quote objects but template expected processed data with calculated fields (total_area, price_per_m2, items_count, sample_items). This caused 500 errors on quotes list page. Router temporarily disabled in production. Acceptance Criteria: 1) QuoteListPresenter class created 2) Router uses presenter to process quotes 3) Template receives processed data 4) All quote routes working 5) Router re-enabled 6) Duplicate main.py route removed 7) Tested and deployed to production.",critical,completed,0,1,none,hotfix/router-data-processing-20251001,critical-refactoring.md,tests/test_integration_quotes_routes.py,"✅ DEPLOYED TO PRODUCTION (Oct 1, 2025 21:30 UTC). Created app/presenters/quote_presenter.py with QuoteListPresenter class. Extracted all data processing logic (85 lines). Router re-enabled, duplicate route removed, tested in test env (port 8001), deployed to production http://159.65.174.94:8000. Zero downtime. All quote routes working with presenter pattern. Fixes HOTFIX-20251001-RCA.md findings."
HOTFIX-20251001-002,"Add Integration Tests for Quote Routes","Add comprehensive integration tests for template rendering and router compatibility to prevent future HOTFIX-20251001-001 type bugs. Test quotes list page rendering, pagination, template data compatibility, database service offset parameter, and QuoteListPresenter integration. Create tests/test_integration_quotes_routes.py with mock-based testing approach using real QuoteListPresenter. Acceptance Criteria: 1) Test quotes list page renders successfully 2) Test pagination works correctly 3) Test template data compatibility 4) Test database service offset parameter 5) Comprehensive coverage of quotes list route.",high,completed,0,1,HOTFIX-20251001-001,test/quote-routes-integration-20251001,critical-refactoring.md,tests/test_integration_quotes_routes.py,"✅ COMPLETE - PR #7 (Oct 1, 2025 22:00 UTC). Created 13 integration tests (690 lines) covering: empty state, single quote, pagination (25 quotes), presenter calculated fields, database pagination parameters. All tests passing (13/13). Coverage: 70% presenter, 23% routes, 50% database. Mock-based testing with real QuoteListPresenter. SQLite test environment. No production code modified. Branch: test/quote-routes-integration-20251001."
DEVOPS-20251001-001,"Docker Build Process Improvements","Implement comprehensive Docker build improvements to prevent Python bytecode cache issues that caused 6+ rebuild attempts during HOTFIX-20251001-001. Add Python cache clearing in Dockerfile, build verification step, automated deployment scripts with verification, and comprehensive deployment runbook. Create network isolation prevention tools based on test environment deployment issues. Acceptance Criteria: 1) Python .pyc cache clearing in Dockerfile 2) Build verification confirms code changes 3) Automated deployment scripts (production + test) 4) Health check improvements 5) Deployment documentation 6) Network prevention tools 7) Test and production deployment successful.",critical,completed,0,2,none,devops/docker-build-improvements-20251001,deployment-improvements.md,none,"✅ DEPLOYED TO PRODUCTION (Oct 3, 2025 16:21 UTC). Added Python cache clearing + build verification to Dockerfile (19 lines). Created deploy-production.sh and deploy-test.sh scripts. Updated health checks in docker-compose.beta.yml. Created DEPLOYMENT-RUNBOOK.md (216 lines). Built prevention tools: pre-deploy-check.sh (183 lines), NETWORK-PREVENTION-GUIDE.md (356 lines), PRODUCTION-DEPLOYMENT-PLAN.md (283 lines). Deployed to test env (port 8001) - fixed network isolation issue (4 attempts). Deployed to production (port 8000) - zero network issues (as predicted). Both environments operational. 95 routes registered, Python cache cleared, build verification working. PR #10 merged. Branch: devops/docker-build-improvements-20251001."
MTENANT-20251006-001,"Phase 1: Create tenants table (Alembic migration)","Create Alembic migration script 001_add_tenant_infrastructure.py to add tenants table with columns: id (BIGSERIAL), name (TEXT), slug (TEXT UNIQUE), is_active (BOOLEAN), subscription_plan (TEXT), created_at (TIMESTAMP), settings (JSONB). Create SQLAlchemy Tenant model in database.py. Add DatabaseTenantService class with basic CRUD operations. Include rollback migration. Test migration on staging database. Acceptance Criteria: 1) Alembic migration created and tested 2) Tenant table created with all columns 3) Tenant model in database.py 4) DatabaseTenantService operational 5) Migration rollback verified 6) No breaking changes to existing tables.",critical,pending,phase-1,3,none,feature/multi-tenant-phase-1-foundation,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 1 Foundation - Non-breaking. Creates tenant infrastructure. Migration creates tenants table. See docs/migrations/multi-tenant-alembic-outline.md."
MTENANT-20251006-002,"Phase 1: Create user_tenant_roles junction table","Create Alembic migration to add user_tenant_roles junction table with columns: id (BIGSERIAL), user_id (UUID FK to users), tenant_id (BIGINT FK to tenants), role (TEXT), is_active (BOOLEAN), created_at (TIMESTAMP). Add UNIQUE constraint on (user_id, tenant_id). Create indexes on user_id and tenant_id for performance. Add UserTenantRole model to database.py. Create TenantRole enum with values: owner, admin, manager, sales, viewer. Acceptance Criteria: 1) user_tenant_roles table created 2) Foreign keys and indexes added 3) UserTenantRole model in database.py 4) TenantRole enum created 5) UNIQUE constraint enforced 6) Migration tested on staging.",critical,pending,phase-1,2,MTENANT-20251006-001,feature/multi-tenant-phase-1-foundation,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 1 Foundation. Junction table for user-tenant-role mapping. Enables users to belong to multiple tenants with different roles."
MTENANT-20251006-003,"Phase 1: Migrate existing users to default tenants","Create data migration script in Alembic to create one default tenant per existing user (1:1 mapping). Generate tenant slug from user UUID. Set subscription_plan to 'professional' for all existing users. Create user_tenant_roles entries with role='admin' for each user-tenant pair. Copy company name from companies table to tenant name if available. Verify all users have exactly one tenant after migration. Acceptance Criteria: 1) One tenant created per existing user 2) All users have admin role in their tenant 3) Tenant names populated from company data 4) Verification query shows 1:1 mapping 5) Data migration tested on staging 6) Rollback tested and working.",critical,pending,phase-1,3,MTENANT-20251006-002,feature/multi-tenant-phase-1-foundation,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 1 Foundation. Data migration preserves existing single-tenant behavior. Creates default tenant for backward compatibility."
MTENANT-20251006-004,"Phase 1: Add tenant context middleware (passive mode)","Create security/tenant_middleware.py with TenantContextMiddleware class. Extract tenant_id from session/token and inject into request.state.tenant_id. Implement in passive mode (logs tenant context but doesn't enforce). Add tenant validation method to check user access to tenant. Create dependency function get_tenant_context() for route injection. Add comprehensive logging for tenant context tracking. Register middleware in main.py. Acceptance Criteria: 1) TenantContextMiddleware created 2) Tenant extraction from session working 3) request.state.tenant_id populated 4) Logging shows tenant context 5) Passive mode doesn't break existing routes 6) get_tenant_context() dependency created 7) Deployed to staging for monitoring.",high,pending,phase-1,4,MTENANT-20251006-003,feature/multi-tenant-phase-1-foundation,multi-tenant-service-layer.md,tests/test_multi_tenant_security.py,"Phase 1 Foundation. Passive middleware prepares for Phase 2 active enforcement. Logs tenant context without breaking existing functionality."
MTENANT-20251006-005,"Phase 1: Full production database backup and staging setup","Create complete PostgreSQL database backup using pg_dump with custom format. Setup point-in-time recovery (PITR) for production database. Verify backup restoration on separate test database. Setup staging environment with production data copy. Create automated backup script for pre-migration backups. Document backup and restore procedures. Test rollback procedures on staging. Acceptance Criteria: 1) Full database backup created 2) PITR enabled on production 3) Backup restoration verified 4) Staging environment operational 5) Automated backup script created 6) Backup documentation complete 7) Rollback procedures tested.",critical,pending,phase-1,2,none,feature/multi-tenant-phase-1-foundation,multi-tenant-migration.md,none,"Phase 1 Foundation - CRITICAL SAFETY. Must complete before any migrations. Enables zero-risk rollback."
MTENANT-20251006-006,"Phase 2: Add tenant_id to quotes table","Create Alembic migration 002_add_tenant_id_business_data.py to add tenant_id column to quotes table. Add column as nullable initially, populate from user_tenant_roles mapping, then make NOT NULL. Create foreign key to tenants table. Add index on (tenant_id, created_at DESC) for query performance. Update Quote model in database.py to include tenant_id. Modify DatabaseQuoteService.create_quote() to accept tenant_id parameter. Acceptance Criteria: 1) tenant_id column added to quotes 2) All existing quotes have tenant_id populated 3) Foreign key constraint added 4) Performance index created 5) Quote model updated 6) Migration tested on staging 7) Zero NULL tenant_id values after migration.",critical,pending,phase-2,3,MTENANT-20251006-004,feature/multi-tenant-phase-2-business-data,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 2 Business Data - MEDIUM RISK. Breaking API change. Requires backward compatibility wrappers. Blocks MTENANT-007."
MTENANT-20251006-007,"Phase 2: Refactor DatabaseQuoteService for tenant filtering","Refactor DatabaseQuoteService in database.py to add tenant-scoped methods. Create get_quotes_by_tenant(tenant_id, user_id=None) method. Update get_quotes_by_user() as backward compatibility wrapper (deprecated). Add tenant_id parameter to create_quote(), update_quote(), delete_quote() methods. Implement tenant validation in all methods. Update all 7 quote service methods. Add deprecation warnings for old methods. Acceptance Criteria: 1) 7 service methods refactored with tenant_id 2) Backward compatibility wrappers created 3) Deprecation warnings added 4) Tenant validation implemented 5) All existing tests pass 6) Integration tests for tenant isolation 7) Performance unchanged (<50ms overhead).",critical,pending,phase-2,4,MTENANT-20251006-006,feature/multi-tenant-phase-2-business-data,multi-tenant-service-layer.md,tests/test_multi_tenant_isolation.py,"Phase 2 Business Data. Service layer refactoring. Critical for tenant isolation. Requires comprehensive testing."
MTENANT-20251006-008,"Phase 2: Add tenant_id to work_orders table","Create Alembic migration to add tenant_id column to work_orders table. Follow same pattern as quotes: nullable initially, populate from user_tenant_roles, make NOT NULL. Create foreign key to tenants table. Add index on (tenant_id, status) for dashboard queries. Update WorkOrder model in database.py. Modify DatabaseWorkOrderService.create_work_order_from_quote() to inherit tenant_id from quote. Acceptance Criteria: 1) tenant_id column added to work_orders 2) All existing work orders have tenant_id 3) Foreign key and index created 4) WorkOrder model updated 5) Work order creation inherits tenant_id 6) Migration tested on staging 7) QTO-001 functionality preserved.",critical,pending,phase-2,2,MTENANT-20251006-006,feature/multi-tenant-phase-2-business-data,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 2 Business Data. Work order tenant isolation. Depends on quotes migration. Preserves QTO-001 system."
MTENANT-20251006-009,"Phase 2: Refactor DatabaseWorkOrderService for tenant filtering","Refactor DatabaseWorkOrderService to add tenant-scoped methods. Create get_work_orders_by_tenant(tenant_id, status=None) method. Update all 5 work order service methods to include tenant_id parameter. Add tenant validation to prevent cross-tenant access. Create backward compatibility wrappers. Implement tenant filtering in work order listing and detail views. Acceptance Criteria: 1) 5 service methods refactored 2) Tenant validation implemented 3) Backward compatibility maintained 4) Work order dashboard tenant-scoped 5) Cross-tenant access blocked 6) All QTO-001 tests pass 7) Integration tests added.",high,pending,phase-2,3,MTENANT-20251006-008,feature/multi-tenant-phase-2-business-data,multi-tenant-service-layer.md,tests/test_multi_tenant_isolation.py,"Phase 2 Business Data. Work order service layer. Completes business data tenant isolation."
MTENANT-20251006-010,"Phase 2: Update API routes for tenant context injection","Update all quote and work order API routes to use tenant context from middleware. Modify app/routes/quotes.py to extract request.state.tenant_id. Update app/routes/work_orders.py for tenant context. Add HTTPException for missing tenant context. Update route decorators with tenant permission checks. Test all 15 quote routes and 10 work order routes. Create backward compatibility layer for gradual migration. Acceptance Criteria: 1) All quote routes use tenant context 2) All work order routes use tenant context 3) Missing tenant context raises 400 error 4) Backward compatibility maintained 5) All route tests pass 6) API documentation updated 7) Deployed to staging for testing.",high,pending,phase-2,5,MTENANT-20251006-009,feature/multi-tenant-phase-2-business-data,multi-tenant-service-layer.md,tests/test_multi_tenant_isolation.py,"Phase 2 Business Data. API route updates. Activates tenant context middleware. Major change requiring extensive testing."
MTENANT-20251006-011,"Phase 2: Activate tenant context middleware (enforcement mode)","Switch TenantContextMiddleware from passive to active enforcement mode. Validate tenant_id presence for all protected routes. Implement 403 Forbidden for unauthorized tenant access. Add PostgreSQL session variable setting: SET LOCAL app.tenant_id = X. Create middleware exception handling for tenant errors. Add audit logging for tenant context enforcement. Deploy to staging with 1-week monitoring period. Acceptance Criteria: 1) Middleware active enforcement enabled 2) 403 errors for invalid tenant access 3) PostgreSQL session variables set 4) Audit logging operational 5) No false positives in staging 6) Performance overhead <10ms 7) 1-week staging monitoring completed.",critical,pending,phase-2,3,MTENANT-20251006-010,feature/multi-tenant-phase-2-business-data,multi-tenant-service-layer.md,tests/test_multi_tenant_security.py,"Phase 2 Business Data - HIGH RISK. Activates tenant enforcement. Requires 1-week staging validation before production."
MTENANT-20251006-012,"Phase 3: Add tenant_id to app_materials table","Create Alembic migration 003_add_tenant_id_catalogs.py to add tenant_id to app_materials. Add column as nullable, assign existing materials to tenant_id=1, make NOT NULL. Create foreign key to tenants table. Add composite index on (tenant_id, category) for catalog filtering. Implement catalog seeding logic: copy default materials to new tenants. Update AppMaterial model in database.py. Acceptance Criteria: 1) tenant_id column added to app_materials 2) Existing materials assigned to tenant 1 3) Foreign key and indexes created 4) Catalog seeding logic implemented 5) AppMaterial model updated 6) Migration tested on staging 7) Material count verified per tenant.",critical,pending,phase-3,4,"MTENANT-20251006-011,ARCH-20251029-001",feature/multi-tenant-phase-3-catalogs,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 3 Catalogs - MEDIUM-HIGH RISK. BLOCKED BY ARCH-20251029-001: Product category system must complete first. Migration 003 creates index on (tenant_id, window_type) for app_products, but ARCH-20251029-001 makes window_type optional and adds product_category field. Migration script needs updating after architecture change. Catalog bloat concern (500MB target per tenant). Lazy seeding recommended."
MTENANT-20251006-013,"Phase 3: Add tenant_id to app_products and material_colors tables","Create Alembic migration to add tenant_id to app_products and material_colors tables. Follow same pattern as app_materials: nullable, populate, NOT NULL. Create foreign keys and performance indexes. Add composite index on (tenant_id, window_type) for app_products. Update AppProduct and MaterialColor models. Implement product catalog seeding for new tenants. Acceptance Criteria: 1) tenant_id added to both tables 2) Existing data assigned to tenant 1 3) Foreign keys and indexes created 4) Product catalog seeding implemented 5) Models updated in database.py 6) Material-color relationships preserved 7) Migration tested on staging.",critical,pending,phase-3,3,MTENANT-20251006-012,feature/multi-tenant-phase-3-catalogs,multi-tenant-migration.md,tests/test_multi_tenant_migrations.py,"Phase 3 Catalogs. Product and material-color tenant isolation. Completes catalog migration."
MTENANT-20251006-014,"Phase 3: Refactor DatabaseMaterialService for tenant filtering","Refactor DatabaseMaterialService to add tenant-scoped methods. Update get_all_materials(tenant_id), get_material_by_code(code, tenant_id), create_material(material_data, tenant_id). Modify all 8 material service methods for tenant isolation. Add tenant validation to prevent cross-tenant material access. Update material CSV import to be tenant-aware. Acceptance Criteria: 1) 8 service methods refactored 2) Tenant validation implemented 3) CSV import tenant-scoped 4) Material catalog isolated per tenant 5) All material tests pass 6) Integration tests for isolation 7) Performance <100ms for catalog queries.",high,pending,phase-3,4,MTENANT-20251006-013,feature/multi-tenant-phase-3-catalogs,multi-tenant-service-layer.md,tests/test_multi_tenant_isolation.py,"Phase 3 Catalogs. Material service layer. CSV import requires tenant context."
MTENANT-20251006-015,"Phase 3: Refactor ProductBOMServiceDB for tenant-aware BOM calculations","Refactor services/product_bom_service_db.py to include tenant_id in all operations. Update get_all_materials(tenant_id), get_material_by_id(id, tenant_id), get_product_by_id(id, tenant_id). Modify BOM calculation functions to filter by tenant. Update calculate_window_item_from_bom() to use tenant-scoped materials. Fix N+1 query issue (PERF-20251003-001) during refactoring. Acceptance Criteria: 1) All BOM service methods tenant-scoped 2) Material lookups filter by tenant_id 3) Product lookups filter by tenant_id 4) BOM calculations use tenant catalog 5) N+1 queries eliminated 6) Quote calculations work correctly 7) Performance <100ms for BOM calculation.",critical,pending,phase-3,5,MTENANT-20251006-014,feature/multi-tenant-phase-3-catalogs,multi-tenant-service-layer.md,tests/test_multi_tenant_isolation.py,"Phase 3 Catalogs - CRITICAL. BOM calculations must use tenant catalog. Opportunity to fix PERF-20251003-001."
MTENANT-20251006-016,"Phase 3: Seed default material catalog per tenant","Create catalog seeding script to duplicate default material catalog for new tenants. Implement lazy seeding: create catalog on first tenant access. Copy materials, products, and material_colors from tenant_id=1 (default template). Add DatabaseTenantService.seed_catalog(tenant_id) method. Create API endpoint POST /api/admin/tenants/{id}/seed-catalog. Add catalog seeding to tenant creation workflow. Acceptance Criteria: 1) Catalog seeding script created 2) Lazy seeding implemented 3) seed_catalog() method operational 4) Admin API endpoint created 5) Seeding tested with multiple tenants 6) Catalog size <500MB per tenant 7) Seeding time <30 seconds.",high,pending,phase-3,3,MTENANT-20251006-015,feature/multi-tenant-phase-3-catalogs,multi-tenant-service-layer.md,tests/test_multi_tenant_migrations.py,"Phase 3 Catalogs. Catalog seeding for new tenants. Lazy loading prevents bloat. Monitor disk space."
MTENANT-20251006-017,"Phase 4: Drop companies.user_id UNIQUE constraint (BREAKING CHANGE)","Create Alembic migration 004_refactor_company_table.py to drop UNIQUE constraint on companies.user_id. Add tenant_id column to companies table. Create UNIQUE constraint on (tenant_id) - one company per tenant. Make user_id nullable (company no longer tied to single user). Map existing companies to tenants via user_tenant_roles. Update Company model in database.py. Acceptance Criteria: 1) UNIQUE constraint on user_id dropped 2) tenant_id column added to companies 3) Existing companies mapped to tenants 4) UNIQUE constraint on tenant_id added 5) user_id made nullable 6) Company model updated 7) Migration tested on staging with rollback plan.",critical,pending,phase-4,4,MTENANT-20251006-016,feature/multi-tenant-phase-4-rbac,multi-tenant-breaking-change.md,tests/test_multi_tenant_migrations.py,"Phase 4 RBAC - BREAKING CHANGE. Enables multi-user companies. Requires comprehensive communication and testing."
MTENANT-20251006-018,"Phase 4: Implement RBAC system with 5 tenant roles","Create models/tenant_models.py with TenantRole enum (owner, admin, manager, sales, viewer). Define ROLE_PERMISSIONS dictionary mapping roles to permissions. Create app/dependencies/tenant_auth.py with require_tenant_permission() dependency. Implement has_permission() function for role checking. Add permission decorators for route protection. Create 20+ permission strings (quotes.create, materials.edit, etc.). Update DatabaseTenantService with role management methods. Acceptance Criteria: 1) TenantRole enum created with 5 roles 2) ROLE_PERMISSIONS defined 3) require_tenant_permission() dependency working 4) Permission decorators operational 5) 20+ permissions defined 6) Role management methods in service 7) Unit tests for permission checking.",critical,pending,phase-4,6,MTENANT-20251006-017,feature/multi-tenant-phase-4-rbac,multi-tenant-rbac.md,tests/test_multi_tenant_rbac.py,"Phase 4 RBAC. Core authorization system. Foundation for multi-user companies."
MTENANT-20251006-019,"Phase 4: Implement tenant switching UI and selection flow","Create templates/tenant_selection.html for multi-tenant user login. Add tenant selector dropdown to templates/dashboard.html navigation. Create POST /api/auth/select-tenant endpoint for tenant switching. Update authentication flow to show tenant selection for multi-tenant users. Create POST /api/auth/switch-tenant for runtime tenant switching. Add tenant context indicator to all pages. Update session token to include selected tenant_id. Acceptance Criteria: 1) Tenant selection page created 2) Dashboard tenant dropdown working 3) select-tenant endpoint functional 4) switch-tenant endpoint functional 5) Multi-tenant login flow working 6) Tenant context visible on all pages 7) Session tokens include tenant_id 8) UX tested with beta users.",high,pending,phase-4,5,MTENANT-20251006-018,feature/multi-tenant-phase-4-rbac,multi-tenant-rbac.md,tests/test_multi_tenant_security.py,"Phase 4 RBAC. Frontend tenant management. Major UX change requiring user training and documentation."
MTENANT-20251006-020,"Phase 4: Enable PostgreSQL Row-Level Security (RLS) policies","Create security/rls_policies.sql with RLS policies for all tenant-scoped tables. Enable RLS on quotes, work_orders, app_materials, app_products, material_colors. Create tenant_isolation_policy for each table: USING (tenant_id = current_setting('app.tenant_id')::bigint). Update TenantContextMiddleware to set PostgreSQL session variable. Create application database role app_authenticated. Apply RLS policies in production. Test RLS enforcement with penetration testing. Acceptance Criteria: 1) RLS policies created for 5 tables 2) RLS enabled on all tenant-scoped tables 3) Middleware sets PostgreSQL session variable 4) app_authenticated role created 5) RLS tested with cross-tenant access attempts 6) Performance overhead <10% 7) Penetration testing passed 8) RLS deployed to production.",critical,pending,phase-4,4,MTENANT-20251006-019,feature/multi-tenant-phase-4-rbac,multi-tenant-security.md,tests/test_multi_tenant_security.py,"Phase 4 RBAC - DEFENSE IN DEPTH. RLS provides database-level tenant isolation. Critical security layer."
MTENANT-20251006-021,"Phase 4: Create tenant onboarding workflow and admin interface","Create POST /api/admin/tenants endpoint for new tenant creation. Implement tenant invitation system: invite_user_to_tenant(email, tenant_id, role). Create templates/admin/tenant_management.html for tenant administration. Add user management UI for adding/removing users from tenants. Implement tenant settings page for customization. Create tenant deactivation workflow. Add tenant analytics dashboard (user count, quote count, storage usage). Acceptance Criteria: 1) Tenant creation API endpoint working 2) User invitation system functional 3) Tenant admin interface created 4) User management UI operational 5) Tenant settings page working 6) Deactivation workflow tested 7) Analytics dashboard created 8) Admin permissions enforced.",high,pending,phase-4,5,MTENANT-20251006-020,feature/multi-tenant-phase-4-rbac,multi-tenant-rbac.md,tests/test_multi_tenant_rbac.py,"Phase 4 RBAC. Tenant administration. Enables SaaS offering and franchise management."
MTENANT-20251006-022,"Performance: Implement query performance benchmarking for multi-tenant operations","Create pytest-benchmark tests for tenant-scoped queries. Benchmark quote listing (P95 <200ms target), material catalog loading (P95 <100ms), BOM calculations (P95 <150ms). Compare performance before and after tenant implementation. Add performance monitoring for tenant context overhead. Create performance regression tests. Document baseline metrics and targets. Acceptance Criteria: 1) Benchmark tests created for all critical queries 2) P95 latency targets defined 3) Before/after comparison documented 4) Performance overhead <10% 5) Regression tests added 6) Metrics documented 7) Performance targets met.",high,pending,phase-2,3,MTENANT-20251006-011,feature/multi-tenant-phase-2-business-data,performance-optimization.md,tests/test_multi_tenant_performance.py,"Performance validation. Ensures multi-tenant implementation meets <200ms P95 latency target."
MTENANT-20251006-023,"Security: Penetration testing for cross-tenant access prevention","Conduct comprehensive penetration testing for tenant isolation. Test SQL injection attempts to bypass tenant filters. Attempt cross-tenant data access via API manipulation. Test tenant_id tampering in requests. Verify RLS policy enforcement at database level. Test authorization bypass attempts. Document all attack vectors tested. Create security test suite for continuous validation. Acceptance Criteria: 1) SQL injection tests performed 2) Cross-tenant access attempts blocked 3) Tenant_id tampering prevented 4) RLS policies verified 5) Authorization bypass prevented 6) All attack vectors documented 7) Security test suite created 8) Zero security vulnerabilities found.",critical,pending,phase-4,3,MTENANT-20251006-020,feature/multi-tenant-phase-4-rbac,multi-tenant-security.md,tests/test_multi_tenant_security.py,"Security validation - CRITICAL. Must pass before production deployment of Phase 4."
MTENANT-20251006-024,"Documentation: Create multi-tenant API documentation and migration guide","Update API documentation with tenant context requirements. Create multi-tenant migration guide for existing users. Document RBAC permission matrix (5 roles × 20 permissions). Write tenant onboarding guide for new customers. Create developer documentation for tenant-aware code. Document backward compatibility and deprecation timeline. Create troubleshooting guide for tenant issues. Acceptance Criteria: 1) API docs updated with tenant context 2) Migration guide created 3) RBAC permission matrix documented 4) Tenant onboarding guide written 5) Developer documentation complete 6) Deprecation timeline published 7) Troubleshooting guide created 8) All docs reviewed and published.",high,pending,phase-4,4,MTENANT-20251006-021,feature/multi-tenant-phase-4-rbac,multi-tenant-rbac.md,none,"Documentation - ESSENTIAL. Enables smooth transition for users and developers. Required before production."
MTENANT-20251006-025,"Production Deployment: Phase 1 production deployment and monitoring","Deploy Phase 1 (tenant infrastructure) to production with zero downtime. Execute full database backup before deployment. Run Alembic migration 001 on production database. Verify all users have default tenant created. Monitor application logs for 48 hours post-deployment. Verify no performance degradation. Create deployment report with metrics. Setup alerts for tenant-related errors. Acceptance Criteria: 1) Full database backup completed 2) Migration executed successfully 3) All users have tenants 4) Zero downtime achieved 5) 48-hour monitoring completed 6) No performance degradation 7) Deployment report created 8) Alerts configured.",critical,pending,phase-1,2,MTENANT-20251006-005,feature/multi-tenant-phase-1-foundation,multi-tenant-migration.md,none,"Production deployment - Phase 1. Non-breaking deployment. Low risk. Foundation for subsequent phases."HOTFIX-20251006-001,"Fix PDF Generation - Company logo_path AttributeError (CRITICAL)","Critical production bug: PDF generation failing with AttributeError 'Company object has no attribute logo_path'. Database model has logo_filename field but code tried to access logo_path. Also JavaScript scope error with originalText variable. Third bug discovered during testing: Quote.quote_data access issue. Fixed all 3 bugs: (1) Changed company.logo_path to construct path from logo_filename (2) Fixed JavaScript variable scope in generatePDF() and convertToWorkOrder() functions (3) Pass quote.quote_data to PDF service instead of quote object. Deployed to test environment (port 8001) and production (port 8000). Zero downtime deployment. Acceptance Criteria: 1) PDF generation works without AttributeError 2) No JavaScript console errors 3) Logo displays correctly when present 4) All 3 bugs fixed and verified 5) Deployed to production.",critical,completed,0,2,none,hotfix/pdf-logo-path-20251006,critical-hotfix.md,tests/test_pdf_generation.py,"✅ DEPLOYED TO PRODUCTION (Oct 6, 2025 21:00 CST). Fixed 3 bugs: (1) logo_path AttributeError - changed to f'static/logos/{company.logo_filename}' (app/routes/quotes.py:575), (2) JavaScript scope error - moved originalText outside try block (templates/view_quote.html:238-295), (3) Quote.quote_data access - pass quote.quote_data to PDF service (app/routes/quotes.py:580). Created tests/test_pdf_generation.py with 3 test cases. Tested on localhost, test env (port 8001), and production (port 8000). All environments verified working. 8 commits. Branch: hotfix/pdf-logo-path-20251006. Documentation in .claude/workspace/HOTFIX-20251006-001/."
ARCH-20251007-001,"Fix Glass Pricing Hardcoded - Database-Driven Architecture","CRITICAL DATA ARCHITECTURE ISSUE: Glass pricing is hardcoded in service layer while profiles, hardware, and consumables use database. Glass materials exist in database but are ignored during quote calculation. Users cannot update glass prices via materials catalog UI (changes appear to save but have no effect). Refactor get_glass_cost_per_m2() to query database instead of hardcoded _GLASS_CATALOG list. Map GlassType enum to material codes (VID-CLARO-4, VID-CLARO-6, etc). Update initialization script to create glass materials with correct codes. Add Alembic migration to update existing glass material codes. Keep hardcoded fallback for backwards compatibility. Acceptance Criteria: 1) Glass prices retrieved from database 2) Price updates via UI take effect immediately 3) All 7 glass types work correctly 4) Existing quotes calculate correctly 5) No performance degradation (<5ms overhead) 6) Unit test coverage >90% 7) Backwards compatible fallback.",high,completed,1,1,none,arch/glass-pricing-database-20251007,architecture-improvement.md,tests/test_glass_pricing_database.py,"✅ PRICING COMPLETE - SELECTION PENDING: 2025-10-14 - Production deployment successful for glass PRICING. Backend pricing fully database-driven ✅. Test env deployed 2025-10-08 (24h monitoring passed). Production deployed 2025-10-14 (8 min, zero downtime). Created 7 glass materials (VID-CLARO-4/6, VID-BRONCE-4/6, VID-REFLECTIVO-6, VID-LAMINADO-6, VID-TEMPLADO-6). Verified: database-driven pricing, UI price updates working, all glass types functional, backward compatibility, performance <5ms (cached), 16 unit tests + 2 integration tests (>90% coverage), fallback mechanism active. ⚠️ PARTIAL LIMITATION: Glass selection dropdown still uses hardcoded GlassType enum (app/routes/quotes.py:303-305) - cannot dynamically add glass types via UI. Pricing is database-driven but dropdown options are hardcoded. See post-deployment-review.md for details. Follow-up task: ARCH-20251017-001 (complete database-driven selection). Production: http://159.65.174.94:8000. Partially unblocks MTENANT-20251006-012 (pricing works, selection needs ARCH-20251017-001)."
ARCH-20251017-001,"Complete Glass Selection Database Migration - Dynamic Dropdown UI","ARCHITECTURAL CONSISTENCY ISSUE: Glass selection dropdown in new quote UI (templates/new_quote.html:218-225) uses hardcoded GlassType enum instead of database query. While ARCH-20251007-001 successfully made glass PRICING database-driven, the SELECTION UI remains hardcoded. Users can update prices via Materials Catalog but cannot add/remove glass types without code deployment. This creates architectural inconsistency (profiles/colors are fully database-driven) and blocks multi-tenant glass catalogs (MTENANT-20251006-012). Complete the database-driven migration by: (1) Update app/routes/quotes.py new_quote_page() to query glass materials from database (2) Update template to populate dropdown from glass_materials instead of glass_types enum (3) Update QuoteItemRequest model to accept selected_glass_material_id instead of selected_glass_type enum (4) Add get_glass_cost_by_material_id() method in ProductBOMServiceDB (5) Keep old enum-based method for backward compatibility (6) Update JavaScript to use glassMaterials (7) Update edit quote page similarly. Match architecture pattern used for profile colors. Acceptance Criteria: 1) Glass dropdown populated from database query 2) New glass materials added via UI appear in dropdown 3) Quote calculation uses material ID instead of enum 4) Backward compatibility: old enum-based quotes still work 5) All 7 glass types work correctly 6) Multi-tenant ready: dropdown filterable by tenant_id 7) Unit + integration tests pass 8) Performance unchanged 9) Zero breaking changes.",medium,completed,1,2,ARCH-20251007-001,arch/glass-selection-database-20251017,architecture-improvement.md,tests/test_glass_pricing_database.py,"✅ MERGED TO MAIN (2025-10-29): Production deployed 2025-10-28, merged to main 2025-10-29. All 7 steps completed (16 commits total). Dropdown fully database-driven (11 materials vs 7 hardcoded). Dual-path architecture: new quotes use selected_glass_material_id, old quotes use selected_glass_type (backward compatible). Added get_glass_cost_by_material_id() method (LRU cached). Fixed 4 issues: (1) Docker container cache (2) Missing get_materials_by_category() method (3) Pydantic validator per-field vs root (4) JavaScript validation, (5) Edit quote null handling. Manual testing: 100% pass rate (6/6 tests). Performance maintained (<100ms). Multi-tenant ready (filterable by tenant_id). Unblocks: MTENANT-20251006-012. Deprecated: GlassType enum (migration timeline 6-12 months). Branch: arch/glass-selection-database-20251017 merged to main (commit d9586ca). Production URL: http://159.65.174.94:8000."
ARCH-20251029-001,"Architectural Fix: Product Category System & Multi-Profile Support","ROOT CAUSE FIX: Replace window-only product model with flexible ProductCategory system (WINDOW, DOOR, LOUVER_DOOR, RAILING, CANOPY, SKYLIGHT). Enable per-BOM-item aluminum line support for hybrid windows (e.g., Series 3 frame + Series 35 sash). Expand MaterialType enum to support specialty materials (LOUVER_SLAT, DOOR_RAIL, RAILING_POST, RAILING_HANDRAIL). Add MaterialOnlyItem support for standalone material sales. This unblocks 40% of architectural projects that require non-window products. Acceptance Criteria: 1) ProductCategory enum replaces window_type constraint 2) AppProduct.product_category field added 3) BOMItem.aluminum_line_override optional field added 4) MaterialType expanded with 8 new types 5) MaterialOnlyItem in quote system 6) All existing windows continue working 7) Can quote doors, railings, louvers professionally 8) Hybrid profile windows supported 9) Zero breaking changes (backward compatible) 10) Migration script for existing data 11) Unit test coverage >90% 12) Integration tests for all product categories.",critical,pending,0,10,none,arch/product-category-system-20251029,architecture-improvement.md,tests/test_product_categories.py,"PROPER FIX: Replaces window-centric model with professional architectural joinery system. Enables 100% project coverage. Fixes beta user blockers (Fernando Ancona - DPTOS DZITYÁ project). Estimated: 80 hours (10 days). Phase 2 Architecture work: 38 hours core + 22 hours polish. ⚠️ CRITICAL BLOCKER: Unblocks MTENANT-20251006-012 (Phase 3 multi-tenant catalogs). Migration 003 needs product_category field in place before creating tenant indexes on app_products. See .claude/workspace/ARCH-20251029-001/ for detailed analysis."
ARCH-20251029-002,"Phase 2 - Task 2.1: ProductCategory System Implementation","Implement ProductCategory enum system to replace window-only product model. Create ProductCategory enum (WINDOW, DOOR, LOUVER_DOOR, RAILING, CURTAIN_WALL, SKYLIGHT, CANOPY, STANDALONE_MATERIAL) in new models/product_categories.py file. Modify AppProduct model to add product_category field (required), make window_type Optional, add door_type Optional field. Add @root_validator for category-specific validation. Create Alembic migration to add product_category column, make window_type nullable, backfill existing products with category='window', add check constraints. Update services/product_bom_service_db.py to handle product_category in create_product() and validation. Update product creation UI templates with category dropdown and conditional field display. Add MaterialOnlyItem model to quote system for standalone material sales. Acceptance Criteria: 1) ProductCategory enum created with 8 categories 2) AppProduct.product_category field added (required) 3) AppProduct.window_type made optional with validator 4) Database migration created and tested 5) Product creation UI updated with category selector 6) MaterialOnlyItem model added to quotes 7) Quote calculation updated for material items 8) All existing products migrated (default: WINDOW) 9) Backward compatibility verified 10) Unit tests pass (>90% coverage).",critical,completed,phase-2,20,none,arch/product-category-20251029,architecture-improvement.md,tests/test_product_category.py,"✅ COMPLETED (Oct 31, 2025) - All 9 steps completed successfully. ProductCategory system implemented with 8 categories (WINDOW, DOOR, LOUVER_DOOR, RAILING, CURTAIN_WALL, SKYLIGHT, CANOPY, STANDALONE_MATERIAL). Database migration 005 applied and verified. MaterialOnlyItem model added for standalone material sales. Integration tests: ✅ Service layer CRUD verified with real database. ✅ Backward compatibility confirmed (3 existing products work). ✅ Material-only quote calculation verified. User Acceptance Testing: ✅ ALL TESTS PASSED. Status: PRODUCTION READY. Commits: 02a2b89 through 2c8787a (15 commits). Branch: arch/product-category-20251029. Zero breaking changes. Unlocks 40% more projects (doors, railings, louvers). Workspace: .claude/workspace/ARCH-20251029-002/. Testing Gap Report created - identified and resolved critical Docker integration testing issue."
ARCH-20251029-003,"Phase 2 - Task 2.2: Multi-Line Profile Support (BOM-Level)","Add aluminum_line field to BOMItem model to enable hybrid windows mixing multiple aluminum series (e.g., Series 3 frame + Series 35 sash). Modify models/product_bom_models.py to add aluminum_line: Optional[AluminumLine] to BOMItem. Update security/formula_evaluator.py documentation to include sectional dimension variables (fixed_width_m, proj_width_m, sash_width_m, etc). Update services/product_bom_service_db.py to handle BOM-level aluminum line in _db_product_to_pydantic(), create_product(), and validation. Modify product creation UI to add aluminum line selector per BOM row (shown only for PERFIL materials). Update templates/products/create_product.html and product_detail.html to display aluminum line for each profile. Create docs/FORMULA-COOKBOOK.md with sectional dimension examples. Update color pricing logic to handle per-item aluminum lines. Acceptance Criteria: 1) BOMItem.aluminum_line field added (optional) 2) BOM UI updated with line selector per row 3) Formula evaluator documentation updated 4) Color pricing per series implemented 5) Example hybrid window products created 6) Quote calculation handles per-item lines 7) Backward compatibility verified (existing BOMs work) 8) Unit tests pass (>90% coverage).",high,pending,phase-2,18,ARCH-20251029-002,arch/multi-line-profiles-20251029,architecture-improvement.md,tests/test_multi_line_profiles.py,"Phase 2: Architecture Enhancement. Enables hybrid windows (30% of high-end projects). BOM-level granularity. 12 hours estimated."
ARCH-20251029-004,"Phase 2 - Task 2.3: Material Types & Category Expansion","Expand material organization with category/subcategory fields for better catalog management and specialized components. Add subcategory column to app_materials table (nullable varchar). Update AppMaterial model to include subcategory field. Create Alembic migration to add subcategory column and indexes (category, subcategory). Add MaterialType.ESPECIALIZADO as catch-all for specialized materials. Populate categories during sample data initialization (Louvers/Tablilla, Puertas/Riel, Barandales/Poste, etc). Update templates/materials_catalog.html with hierarchical category filters and subcategory dropdowns. Create specialized material catalog sections (louver slats, door rails, railing posts). Update services/product_bom_service_db.py initialize_sample_data() to include specialized materials. Create material CSV service updates for category/subcategory import/export. Document category naming conventions in docs/MATERIAL-CATALOG-REFERENCE.md. Acceptance Criteria: 1) AppMaterial.subcategory field added (optional) 2) Database migration populates categories for existing materials 3) MaterialType.ESPECIALIZADO added to enum 4) Materials catalog UI updated with category filters 5) Specialized material catalog sections created 6) Sample data includes louver, door, railing materials 7) Backward compatibility verified 8) Unit tests pass (>90% coverage).",high,pending,phase-2,16,ARCH-20251029-003,arch/material-categories-20251029,architecture-improvement.md,tests/test_material_categories.py,"Phase 2: Catalog Enhancement. Organizes materials for all product types. 10 hours estimated."
ARCH-20251029-005,"Phase 3 - Task 3.1: Product Template Library Creation","Create pre-configured product templates for common configurations (doors, railings, louvers, hybrid windows) to accelerate user onboarding. Create scripts/create_product_templates.py with functions to generate template products. Generate 3 louver door templates (L-01 Single Leaf, L-02 Double Leaf, L-03 Solid Bottom Panel). Generate 4 railing templates (R-01 Glass Infill Standard, R-02 High Security Tempered, R-03 Aluminum Picket, R-04 Cable Rail). Generate 5 hybrid window templates (HW-01 Fixed+Projecting S3+S35, HW-02 Fixed+Sliding, HW-03 Europeo Mix, HW-04 Curtain Wall, HW-05 Skylight). Generate 10 door templates (D-01 through D-10 covering sliding, swing, pivot, folding, storefront). Update services/product_bom_service_db.py initialize_sample_data() to call template creation. Add template UI section to products catalog with \"Copy Template\" feature. Create docs/PRODUCT_TEMPLATES.md documenting each template with use cases and customization tips. Acceptance Criteria: 1) Template creation script functional 2) 22 templates created (3 louver + 4 railing + 5 hybrid + 10 door) 3) Templates include complete BOMs with formulas 4) Template UI added to products catalog 5) Documentation comprehensive 6) Templates tested in quote calculation 7) Sample data initialization updated.",medium,pending,phase-3,8,ARCH-20251029-004,arch/product-templates-20251029,architecture-improvement.md,tests/test_product_templates.py,"Phase 3: Polish. Accelerates onboarding. Professional starting points. 8 hours estimated."
ARCH-20251029-006,"Phase 3 - Task 3.2: Documentation & Training Materials","Create comprehensive documentation and training materials for new product category system and multi-line profiles. Write docs/USER-GUIDE-PRODUCT-CATEGORIES.md covering creating products in each category, understanding category-specific fields, BOM building best practices, formula cookbook reference. Create video tutorial scripts (one per product type): louver doors, hybrid windows, standalone materials, material categories. Write docs/BOM-FORMULA-COOKBOOK.md with basic formula patterns, sectional dimension formulas, complex calculation examples, math function reference, troubleshooting guide. Create docs/MATERIAL-CATALOG-REFERENCE.md with category naming conventions, subcategory organization guidelines, creating custom materials, pricing strategies. Write migration guide docs/MIGRATION-GUIDE-ARCHITECTURE.md for existing users. Update CLAUDE.md with new features, architecture patterns, product categories, material organization. Update API documentation with new endpoints and models. Acceptance Criteria: 1) User guide comprehensive and clear 2) 4 video tutorial scripts written 3) BOM formula cookbook complete with 20+ examples 4) Material catalog reference detailed 5) Migration guide for existing users 6) CLAUDE.md updated 7) API documentation current 8) All docs peer-reviewed.",medium,pending,phase-3,6,ARCH-20251029-005,docs/architecture-training-20251029,architecture-improvement.md,none,"Phase 3: Documentation. Enables smooth adoption. User training. 6 hours estimated."
ARCH-20251029-007,"Phase 3 - Task 3.3: Testing & Validation (Integration + Performance)","Comprehensive testing and validation of new architecture features including integration tests, performance tests, and user acceptance testing. Create tests/test_integration_architecture.py with end-to-end tests for quote creation with new categories, hybrid window calculations, standalone material quotes, product template usage. Create tests/test_performance_architecture.py with benchmark tests for quote calculation performance (<100ms target), large catalog handling (100+ products), BOM calculation with complex formulas, verify no N+1 query degradation. Create tests/UAT_PLAN_ARCHITECTURE.md with user acceptance test checklist for beta user. Implement test for DPTOS DZITYÁ project (213 windows + 6 railings + 4 louvers + 77 glass = 100% coverage). Add performance benchmarking with pytest-benchmark. Document baseline metrics and targets in tests/PERFORMANCE_BENCHMARKS.md. Run complete test suite and achieve >90% coverage. Validate backward compatibility with existing quotes and products. Acceptance Criteria: 1) Integration tests comprehensive (50+ test cases) 2) Performance tests with benchmarks documented 3) UAT plan created and executed 4) Beta user project fully tested (DPTOS DZITYÁ) 5) All edge cases covered 6) Backward compatibility verified 7) Test coverage >90% maintained 8) Performance benchmarks meet targets (<100ms).",medium,pending,phase-3,8,ARCH-20251029-006,test/architecture-validation-20251029,architecture-improvement.md,tests/test_integration_architecture.py,"Phase 3: Quality Assurance. Ensures production readiness. Performance validation. 8 hours estimated."
ARCH-20251029-008,"Phase 2 - Task 2.1.1: Quote Module Multi-Category Support","Generalize quote module to support all product categories beyond windows. Rename WindowItem to ProductItem (maintain backward compatibility alias). Make glass selection optional (only required for products with glass in BOM). Add category-specific fields: door_hardware_id (for doors), railing_finish_id (for railings), optional_accessories (array). Update quote models validators to be category-aware. Rename WindowCalculation to ProductCalculation. Update main.py calculate_window_item_from_bom() to calculate_product_item_from_bom() with category detection. Make glass cost calculation conditional (only if BOM contains VIDRIO materials). Add door-specific calculation logic (hardware, rails). Add railing-specific calculation logic (finish, infill panels). Update templates/new_quote.html to dynamically show/hide fields based on product.product_category. Rename addWindowItem() to addProductItem(). Add product category detection from selected product. Conditional rendering: glass selector (windows/glass doors only), door hardware selector (doors), railing finish selector (railings). Update product dropdown to include ALL categories. Update live cost preview for non-glass products. Ensure quote display (view_quote.html, edit_quote.html) handles all product types. Acceptance Criteria: 1) ProductItem model with optional glass, category-specific fields 2) WindowItem maintained as backward-compatible alias 3) Quote calculation handles all 8 product categories 4) UI conditionally shows fields based on product category 5) Can create quotes with doors, railings, louvers, canopies 6) Existing window quotes load and display correctly 7) Glass calculation conditional (only if BOM has glass) 8) All integration tests pass 9) Backward compatibility 100% verified 10) Zero breaking changes to existing quotes.",critical,pending,phase-2,16,ARCH-20251029-002,arch/quote-multi-category-20251029,architecture-improvement.md,tests/test_quote_multi_category.py,"Phase 2: CRITICAL GAP. Without this, ProductCategory system (ARCH-20251029-002) cannot be used - users can create doors/railings but cannot quote them. Enables full business value of multi-category architecture. 16 hours estimated."
