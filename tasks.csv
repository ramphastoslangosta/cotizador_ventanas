task_id,title,description,priority,status,phase,estimated_effort,dependencies,branch_name,pr_template,test_file,notes
TASK-20250929-001,"Decompose main.py monolith - Extract authentication routes","Extract authentication-related routes from main.py (2,273 lines) to app/routes/auth.py. Move login, register, logout routes while maintaining existing API contracts. Create app/routes/__init__.py and app/dependencies/auth.py structure. Ensure all existing tests pass without modification. Target: Reduce main.py by ~300 lines. Acceptance Criteria: 1) All auth routes moved to auth.py 2) No API contract changes 3) All tests pass 4) Authentication flow unchanged.",critical,pending,1,2,none,refactor/auth-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,
TASK-20250929-002,"Decompose main.py monolith - Extract quote routes","Extract quote-related routes from main.py to app/routes/quotes.py. Move quote CRUD operations, calculate endpoint, and quote list page. Preserve quote calculation engine functionality. Target: Reduce main.py by ~500 lines. Acceptance Criteria: 1) All quote routes moved to quotes.py 2) Quote calculations work identically 3) CSV export/import preserved 4) Quote editing (QE-001) functional.",critical,pending,1,2,TASK-20250929-001,refactor/quote-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,
TASK-20250929-003,"Decompose main.py monolith - Extract work order and material routes","Extract work order routes (QTO-001 system) to app/routes/work_orders.py and material management routes to app/routes/materials.py. Move WorkOrder CRUD operations, materials catalog, and CSV upload endpoints. Target: Reduce main.py to <500 lines. Acceptance Criteria: 1) Work order routes in work_orders.py 2) Material routes in materials.py 3) QTO-001 functionality preserved 4) Material CSV upload working 5) main.py contains only app initialization.",critical,pending,1,2,TASK-20250929-002,refactor/workorder-material-routes-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,
TASK-20250929-004,"Fix CSV test script extreme complexity","Refactor run_csv_tests.py to reduce cyclomatic complexity from E rating (31) to <10. Extract test case generators to separate functions. Implement test builder pattern for CSV test scenarios. Break down monolithic test function into focused unit tests. Acceptance Criteria: 1) Cyclomatic complexity <10 2) Test coverage maintained 3) All CSV tests pass 4) Code follows pytest best practices 5) Test execution time unchanged or improved.",high,pending,1,1,none,refactor/csv-tests-complexity-20250929,critical-refactoring.md,tests/test_routes_refactor_scaffold.py,
TASK-20250929-005,"Implement service interfaces for dependency inversion","Create abstract base classes for database services to implement Dependency Inversion Principle. Add IUserService, IQuoteService, IWorkOrderService, IMaterialService interfaces in app/interfaces/. Update existing service classes to implement interfaces. Enable better testing with mock implementations. Acceptance Criteria: 1) Abstract base classes created 2) All services implement interfaces 3) Services depend on abstractions not concretions 4) Mock service implementations for testing 5) No functionality changes.",high,pending,1,2,TASK-20250929-003,refactor/service-interfaces-20250929,critical-refactoring.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-006,"Optimize database queries in BOM calculations","Fix N+1 query problem in calculate_window_item_from_bom function (main.py:533-650). Implement eager loading for BOM relationships using SQLAlchemy joinedload(). Add query batching for material lookups. Target: Reduce database queries by 80%, improve quote calculation from 200ms to 50ms. Acceptance Criteria: 1) N+1 queries eliminated 2) Performance improvement measured with pytest-benchmark 3) Quote calculation <100ms for typical BOM 4) Database query count reduced by 80% 5) No functionality changes.",high,pending,2,2,TASK-20250929-003,perf/bom-query-optimization-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-007,"Implement formula evaluation caching","Add LRU cache for SafeFormulaEvaluator parsed expressions. Cache simpleeval expression parsing to avoid repeated parsing overhead. Implement functools.lru_cache with maxsize=128 for frequently used formulas. Target: Reduce formula evaluation overhead by 60%. Acceptance Criteria: 1) LRU cache implemented for expression parsing 2) Cache hit rate >70% for typical usage 3) Performance improvement measured 4) Memory usage acceptable (<50MB cache) 5) Cache invalidation on formula changes.",medium,pending,2,1,TASK-20250929-006,perf/formula-caching-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-008,"Implement streaming CSV processing","Replace memory-intensive CSV loading in MaterialCSVService with streaming approach. Implement chunked processing for large CSV files using pandas chunksize parameter or csv.reader iteration. Support CSV files up to 100MB (currently limited to ~10MB). Reduce memory usage for CSV operations. Acceptance Criteria: 1) Streaming CSV reader implemented 2) Support files up to 100MB 3) Memory usage <200MB for 100MB file 4) Processing time linear with file size 5) All CSV import/export tests pass.",medium,pending,2,2,TASK-20250929-004,perf/csv-streaming-20250929,performance-optimization.md,tests/test_performance_optimization_scaffold.py,
TASK-20250929-009,"Implement command pattern for quote calculations","Create CalculateQuoteCommand class implementing command pattern for quote calculation operations. Enable undo/redo functionality for quote modifications. Improve testability by encapsulating calculation logic. Add QuoteCommandInvoker for command execution. Acceptance Criteria: 1) CalculateQuoteCommand class created 2) Command pattern properly implemented 3) Undo capability added 4) Calculation logic encapsulated 5) Unit tests for command execution.",medium,pending,3,2,TASK-20250929-006,arch/quote-command-pattern-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-010,"Extract business logic from Jinja2 templates","Move calculation logic from HTML templates to service layer. Create template helper functions in services/template_helpers.py. Extract data processing from templates/quotes_list.html, templates/view_quote.html, templates/work_order_detail.html. Improve separation of concerns following Single Responsibility Principle. Acceptance Criteria: 1) No calculations in templates 2) Template helpers created 3) Templates use pre-processed data only 4) All pages render correctly 5) No visual changes to UI.",low,pending,3,1,TASK-20250929-009,arch/template-logic-extraction-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,
TASK-20250929-011,"Implement factory pattern for model creation","Create MaterialFactory and ProductFactory classes for model instantiation. Simplify object creation with validation and default values. Add factories in app/factories/ directory. Enable consistent object creation across application. Acceptance Criteria: 1) MaterialFactory class created 2) ProductFactory class created 3) Factories handle validation 4) Default values properly set 5) Existing code migrated to use factories.",low,pending,3,1,TASK-20250929-010,arch/model-factories-20250929,architecture-improvement.md,tests/test_architecture_patterns_scaffold.py,