#!/usr/bin/env python3
"""
Script para verificar que la selecci√≥n de colores funciona en nueva cotizaci√≥n
"""
import requests
from datetime import datetime

def test_color_selection():
    """Verificar funcionalidad de selecci√≥n de colores"""
    print("üéØ VERIFICANDO SELECCI√ìN DE COLORES EN NUEVA COTIZACI√ìN")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    base_url = "http://localhost:8000"
    
    # 1. Verificar que la p√°gina de nueva cotizaci√≥n se carga
    print("\n1Ô∏è‚É£ Verificando acceso a p√°gina de nueva cotizaci√≥n...")
    try:
        response = requests.get(f"{base_url}/quotes/new", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ P√°gina de nueva cotizaci√≥n accesible")
            content = response.text
            
            # Verificar elementos de color
            if "selected-profile-color" in content:
                print("   ‚úÖ Selector de color de perfiles encontrado")
            else:
                print("   ‚ùå Selector de color de perfiles NO encontrado")
                
            if "Color de Perfiles" in content:
                print("   ‚úÖ Etiqueta 'Color de Perfiles' encontrada")
            else:
                print("   ‚ùå Etiqueta 'Color de Perfiles' NO encontrada")
                
            if "loadProfileColors" in content:
                print("   ‚úÖ Funci√≥n loadProfileColors encontrada")
            else:
                print("   ‚ùå Funci√≥n loadProfileColors NO encontrada")
                
        else:
            print(f"   ‚ùå Error: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False
    
    # 2. Verificar API de materiales por categor√≠a (necesaria para colores)
    print("\n2Ô∏è‚É£ Verificando API de materiales por categor√≠a...")
    try:
        response = requests.get(f"{base_url}/api/materials/by-category", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("   ‚úÖ API de categor√≠as funcionando")
            
            if 'categories' in data and 'Perfiles' in data['categories']:
                profiles = data['categories']['Perfiles']
                profiles_with_colors = [p for p in profiles if p.get('has_colors', False)]
                print(f"   üìä Perfiles totales: {len(profiles)}")
                print(f"   üé® Perfiles con colores: {len(profiles_with_colors)}")
                
                if profiles_with_colors:
                    example_profile = profiles_with_colors[0]
                    print(f"   üí° Ejemplo: {example_profile['name']} tiene {len(example_profile.get('colors', []))} colores")
                    
                    # Mostrar colores disponibles
                    if example_profile.get('colors'):
                        print("   üé® Colores disponibles:")
                        for color in example_profile['colors'][:3]:  # Solo mostrar primeros 3
                            print(f"      ‚Ä¢ {color['color_name']}: ${color['price_per_unit']}")
                
        else:
            print(f"   ‚ùå Error API: Status {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Error API: {e}")
    
    # 3. Verificar API de colores
    print("\n3Ô∏è‚É£ Verificando API de colores...")
    try:
        response = requests.get(f"{base_url}/api/colors", timeout=10)
        if response.status_code == 200:
            colors = response.json()
            print(f"   ‚úÖ API de colores funcionando - {len(colors)} colores disponibles")
            
            for color in colors[:5]:  # Mostrar primeros 5
                print(f"      üé® {color['name']} ({color['code']})")
                
        else:
            print(f"   ‚ùå Error API colores: Status {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Error API colores: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ VERIFICACI√ìN COMPLETADA")
    print("\nüí° Para probar la funcionalidad completa:")
    print("   üåê Visita: http://localhost:8000/quotes/new")
    print("   üîß Pasos a seguir:")
    print("      1. Llena los datos del cliente")
    print("      2. Haz clic en 'Agregar Ventana'")
    print("      3. Selecciona tipo de ventana y l√≠nea de aluminio")
    print("      4. Selecciona un producto")
    print("      5. ‚ú® NUEVO: Observa que aparecen colores disponibles")
    print("      6. Selecciona un color de perfil")
    print("      7. Completa dimensiones y tipo de vidrio")
    print("      8. Observa que la descripci√≥n incluye el color")
    print("      9. Calcula la cotizaci√≥n")
    
    return True

if __name__ == "__main__":
    test_color_selection()